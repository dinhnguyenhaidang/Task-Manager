/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interfaces;

import java.awt.Font;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.LinkedList;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import sources.Algorithm;
import sources.Task;

/**
 *
 * @author Dinh Nguyen Hai Dang - B1704721
 */
public class MainFrame extends javax.swing.JFrame {

    private static DateTimeFormatter defaultDateTimeFormatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
    private Font defaultFont = new Font("Calibri", Font.PLAIN, 18);
    public static LinkedList<Task> taskList = new LinkedList<>();

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        buttonRefresh = new javax.swing.JButton();
        buttonInsert = new javax.swing.JButton();
        buttonEdit = new javax.swing.JButton();
        buttonDelete = new javax.swing.JButton();
        textDate = new javax.swing.JTextField();
        buttonCalculate = new javax.swing.JButton();
        comboBoxDate = new javax.swing.JComboBox();
        menuBar = new javax.swing.JMenuBar();
        menuHelp = new javax.swing.JMenu();
        menuAbout = new javax.swing.JMenu();
        menuAboutAuthor = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Task Manager");
        setName("frame"); // NOI18N

        table.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Task ID", "Description", "Duration", "Predecessors", "Earliest Start", "Latest Start", "Deadline"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.getTableHeader().setReorderingAllowed(false);
        scrollPane.setViewportView(table);
        table.getTableHeader().setFont(new Font("Calibri", Font.PLAIN, 18));

        buttonRefresh.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        buttonRefresh.setText("Refresh");
        buttonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRefreshActionPerformed(evt);
            }
        });

        buttonInsert.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        buttonInsert.setText("Insert");
        buttonInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonInsertActionPerformed(evt);
            }
        });

        buttonEdit.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        buttonEdit.setText("Edit");
        buttonEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEditActionPerformed(evt);
            }
        });

        buttonDelete.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        buttonDelete.setText("Delete");
        buttonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeleteActionPerformed(evt);
            }
        });

        textDate.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N

        buttonCalculate.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        buttonCalculate.setText("Calculate");
        buttonCalculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCalculateActionPerformed(evt);
            }
        });

        comboBoxDate.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        comboBoxDate.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Start Date", "End Date" }));

        menuHelp.setText("Help");
        menuHelp.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        menuHelp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuHelpMouseClicked(evt);
            }
        });
        menuBar.add(menuHelp);

        menuAbout.setText("About");
        menuAbout.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N

        menuAboutAuthor.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        menuAboutAuthor.setText("Author");
        menuAboutAuthor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAboutAuthorActionPerformed(evt);
            }
        });
        menuAbout.add(menuAboutAuthor);

        menuBar.add(menuAbout);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollPane)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(comboBoxDate, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(textDate, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 86, Short.MAX_VALUE)
                        .addComponent(buttonRefresh)
                        .addGap(18, 18, 18)
                        .addComponent(buttonInsert)
                        .addGap(18, 18, 18)
                        .addComponent(buttonEdit)
                        .addGap(18, 18, 18)
                        .addComponent(buttonDelete)
                        .addGap(18, 18, 18)
                        .addComponent(buttonCalculate)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {buttonCalculate, buttonDelete, buttonEdit, buttonInsert, buttonRefresh});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(buttonRefresh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonInsert, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(textDate, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(comboBoxDate, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(buttonEdit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonCalculate, javax.swing.GroupLayout.PREFERRED_SIZE, 33, Short.MAX_VALUE)
                    .addComponent(buttonDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 622, Short.MAX_VALUE)
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {buttonCalculate, buttonDelete, buttonEdit, buttonInsert, buttonRefresh, comboBoxDate, textDate});

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    public static void load() {
        // Remove all rows from table
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        int rowCount = model.getRowCount();
        for (int i = rowCount - 1; i >= 0; i--) {
            model.removeRow(i);
        }

        // Bind taskList to table
        try {
            for (Task task : taskList) {
                Object[] row = {task.getTaskID(), task.getDescription(), task.getDuration() + " day(s)", task.getPredecessors().toString(), task.getEarliestStartingDate().format(defaultDateTimeFormatter), task.getLatestStartingDate().format(defaultDateTimeFormatter), task.getDeadline().format(defaultDateTimeFormatter)};
                model.addRow(row);
            }
        } catch (NullPointerException ex) {
            for (Task task : taskList) {
                Object[] row = {task.getTaskID(), task.getDescription(), task.getDuration() + " day(s)", task.getPredecessors().toString()};
                model.addRow(row);
            }
        }
    }

    private void buttonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRefreshActionPerformed
        load();
    }//GEN-LAST:event_buttonRefreshActionPerformed

    private void buttonInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonInsertActionPerformed
        // Open an InsertFrame
        InsertFrame insertFrame = new InsertFrame();
        insertFrame.setVisible(true);
    }//GEN-LAST:event_buttonInsertActionPerformed

    private void buttonEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEditActionPerformed
        // Get selected row
        int selectedIndex = table.getSelectedRow();

        // Open an EditFrame
        if (selectedIndex == -1) {
            JLabel message = new JLabel("Please choose a task.");
            message.setFont(defaultFont);
            JOptionPane.showMessageDialog(this, message, null, JOptionPane.ERROR_MESSAGE);
        } else {
            int modelIndex = table.convertRowIndexToModel(selectedIndex);
            EditFrame.editingTask = taskList.get(modelIndex);
            EditFrame editFrame = new EditFrame();
            editFrame.setVisible(true);
        }
    }//GEN-LAST:event_buttonEditActionPerformed

    private void buttonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeleteActionPerformed
        // Get selected row
        int selectedIndex = table.getSelectedRow();

        // Delete selected task from taskList        
        try {
            int modelIndex = table.convertRowIndexToModel(selectedIndex);
            taskList.get(modelIndex).removeFrom(taskList);
        } catch (IndexOutOfBoundsException ex) {
            JLabel message = new JLabel("Please choose a task.");
            message.setFont(defaultFont);
            JOptionPane.showMessageDialog(this, message, null, JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Delete selected row from table
        if (selectedIndex != -1) {
            int modelIndex = table.convertRowIndexToModel(selectedIndex); // Converts the row index in the view to the appropriate index in the model
            DefaultTableModel model = (DefaultTableModel) table.getModel();
            model.removeRow(modelIndex);
        }

        // Update data in table
        load();
        
        // Adjust the selected row for convenient deleting
        if (selectedIndex > 0) {
            table.setRowSelectionInterval(selectedIndex - 1, selectedIndex - 1);
        }
        if (selectedIndex < table.getRowCount()) {
            table.setRowSelectionInterval(selectedIndex, selectedIndex);
        }
        
        // Announce
        JLabel message = new JLabel("Deleted task " + selectedIndex + " successfully.");
        message.setFont(defaultFont);
        JOptionPane.showMessageDialog(this, message, null, JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_buttonDeleteActionPerformed

    private void buttonCalculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCalculateActionPerformed
        // Check table
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        int rowCount = model.getRowCount();
        if (rowCount == 0) {
            JLabel message = new JLabel("No task can be found.");
            message.setFont(defaultFont);
            JOptionPane.showMessageDialog(this, message, null, JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Use algorithm
        try {
            Algorithm.gantt(taskList);
        } catch (IndexOutOfBoundsException ex) {
            JLabel message = new JLabel("No task can be found.");
            message.setFont(defaultFont);
            JOptionPane.showMessageDialog(this, message, null, JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Add values to taskList
        LocalDate start = LocalDate.now();
        LocalDate end = LocalDate.now();
        try {
            if (comboBoxDate.getSelectedIndex() == 0) { // Start date provided
                start = LocalDate.parse(textDate.getText(), DateTimeFormatter.ofPattern("dd-MM-yyyy"));
            } else if (comboBoxDate.getSelectedIndex() == 1) { // End date provided
                end = LocalDate.parse(textDate.getText(), DateTimeFormatter.ofPattern("dd-MM-yyyy"));
                start = end.minusDays(taskList.getLast().getLatestStart() + taskList.getLast().getDuration() - 1);
            }
        } catch (DateTimeParseException ex) {
            JLabel message = new JLabel("Provided date is not valid. Today will be used as Start Date instead.");
            message.setFont(defaultFont);
            JOptionPane.showMessageDialog(this, message, null, JOptionPane.ERROR_MESSAGE);
        }
        for (Task task : taskList) {
            task.setEarliestStartingDate(start.plusDays(task.getEarliestStart()));
            task.setLatestStartingDate(start.plusDays(task.getLatestStart()));
            task.setDeadline(task.getLatestStartingDate().plusDays(task.getDuration() - 1));
        }

        // Check if there are errors
        boolean errorDetected = false;
        for (Task task : taskList) {
            if (task.getEarliestStart() < -9000 || task.getLatestStart() > 9000) {
                errorDetected = true;
            }
        }
        if (errorDetected) {
            for (Task task : taskList) {
                task.setEarliestStartingDate(null);
                task.setLatestStartingDate(null);
            }
            JLabel message = new JLabel("Cycle detected. Please adjust tasks\' connections.");
            message.setFont(defaultFont);
            JOptionPane.showMessageDialog(this, message, null, JOptionPane.ERROR_MESSAGE);
        }

        // Reload to show calculated date.
        load();
    }//GEN-LAST:event_buttonCalculateActionPerformed

    private void menuHelpMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuHelpMouseClicked
        MainHelp frame = new MainHelp();
        frame.setVisible(true);
    }//GEN-LAST:event_menuHelpMouseClicked

    private void menuAboutAuthorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAboutAuthorActionPerformed
        AuthorFrame frame = new AuthorFrame();
        frame.setVisible(true);
    }//GEN-LAST:event_menuAboutAuthorActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCalculate;
    private javax.swing.JButton buttonDelete;
    private javax.swing.JButton buttonEdit;
    private javax.swing.JButton buttonInsert;
    private javax.swing.JButton buttonRefresh;
    private javax.swing.JComboBox comboBoxDate;
    private javax.swing.JMenu menuAbout;
    private javax.swing.JMenuItem menuAboutAuthor;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuHelp;
    private javax.swing.JScrollPane scrollPane;
    private static javax.swing.JTable table;
    private javax.swing.JTextField textDate;
    // End of variables declaration//GEN-END:variables
}
